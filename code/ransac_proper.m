function [best_H, best_inliers,least_error] = ransac_proper(x1,y1,x2,y2,iters)

iters = 2000;

num_rand_inds = 4;

thresh = 500;
best_H = [];
best_inliers = 0;
%Set the inlier requirment as 85% of the length of matching Feature points
inliers_req = floor(length(x1) * 0.85);
%H_collection is used to store all the homographies generated by RANSAC
%along with the errors obtained in those iterations and the respective
%indices.
H_collection = cell(1,1);
count = 1;
for iter = 1:iters
    
    %Pick num_rand_inds random points.
    match_inds = randperm(length(x1),num_rand_inds);
    x = x1(match_inds);
    y = y1(match_inds);
    xd = x2(match_inds);
    yd = y2(match_inds);
    
    
    %Generate A matrix from the random matching points.
    A = generateA(x,y,xd,yd);
    
    %Calculate Homography H for the A matrix obtained.
    [~,~,V] = svd(A);
    H = V(:,end);
    H = H/H(9);
    %Perform a sanity check. sum(AH) ~= 0
    fprintf('Value of sum(A*H) is %.3f \n',sum(A*H)); 
    H = reshape(H,[3 3])';
    
    %Determine all other indices in the set. Take a set difference of all
    %points and the points used to form the H matrix.
    new_inds = setdiff(1:length(x1),match_inds);
    
    %Find the corresponding x,y,xd and yd points
    x_others = transpose(x1(new_inds));
    y_others = transpose(y1(new_inds));
    xd_others = transpose(x2(new_inds));
    yd_others = transpose(y2(new_inds));
    % Stack all the inputs horizontally in this format: [x1,y1,1;x2, y2, 1;....]
    input = [x_others;y_others;ones(1,length(new_inds))];
    
    %Sanity check for the size of input and Homography matrix
    fprintf('Input size: [%d,%d], H size: [%d,%d] \n',size(input,1),...
        size(input,2), size(H,1),size(H,2)); 
    output = H*input;
    xd_pred = output(1,:) ./ output(3,:);
    yd_pred = output(2,:) ./ output(3,:);
    %Now to check for errors between xd_pred, yd_pred and xd_others, 
    %yd_others to find inliers and outliers
    errs = sqrt((xd_others - xd_pred).^2 + (yd_others - yd_pred).^2); 
    
    
    %Find all the indices where error is less than the threshold.
    inlier_inds = find(errs < thresh);
    %Check for number of inliers
    num_inliers = length(inlier_inds);
    fprintf('%d inliers found in iteration %d \n',num_inliers, iter); 
    if num_inliers > best_inliers && num_inliers > inliers_req 
        best_inliers = num_inliers;
        %Inlier requirement has been met. Need to recalculate the H matrix
        %by using all the inliers.
        x_inliers = [x',x_others(inlier_inds)] ;
        y_inliers = [y',y_others(inlier_inds)];
        xd_inliers = [xd',xd_others(inlier_inds)];
        yd_inliers = [yd',yd_others(inlier_inds)];
        
        %Generate new A matrix
        A_all = generateA(x_inliers,y_inliers,xd_inliers,yd_inliers);
        [~,~,V] = svd(A_all);
        H_all = V(:,end);
        H_all = H_all/H_all(9);
        H_all = reshape(H_all,[3 3])';
        
        H_collection{count,1} = H_all;
        H_collection{count,2} = num_inliers;
        H_collection{count,3} = xd_inliers;
        H_collection{count,4} = yd_inliers;
        count = count + 1;
        
    end

   
end

 %Now to determine the best fit error for all the H matrices obtained
    least_error = Inf;
    input = [x1';y1';ones(1,length(x1))];
    for i = 1:size(H_collection,1)
        H = H_collection{i,1};
        fprintf('H size: [%d,%d] , Input size: [%d,%d]\n',size(H,1),...
        size(H,2), size(input,1),size(input,2)); 
        output = H*input;
        xd_pred = output(1,:) ./ output(3,:);
        yd_pred = output(2,:) ./ output(3,:);
        %Now to check for errors between x2_others and scaled_X to find inliers
        %and outliers
        err = mean((y2' - yd_pred).^2);
        if err < least_error
            err
            best_H = H;
            least_error = err;
            best_inliers = H_collection{i,2};
            x_indices = H_collection{i,3};
            y_indices = H_collection{i,4};
        end   
    end
    
end

%{
    im1 = I(1,1);
    im2 = I(2,1);
    im = [im1,im2];
    figure, imagesc(im);
    hold on;
    plot([transpose(y1m), transpose(y2m)],[transpose(x1m),transpose(x1m) + size(im1,2)], ...
    'r*', 'LineWidth', 2, 'MarkerSize', 15);
    %}